- id: '1630971499864'
  alias: Climate - Auto Heater Master Bedroom
  description: ''
  use_blueprint:
    path: auto_heaters.yaml
    input:
      climate_entity: climate.master_bedroom
      time_start: '21:00:00'
      time_end: 07:00:00
      house_occupancy: sensor.house_status
      enable_switch: input_boolean.enable_heater_master
      smart_plug: switch.heater_master
      power_meter: sensor.power_heater_master
      demand_power: 2500
      temp_sensor: sensor.temp_master
- id: '1630971683566'
  alias: Climate - Auto Heater Sofia
  description: ''
  use_blueprint:
    path: auto_heaters.yaml
    input:
      climate_entity: climate.sofia_bedroom
      time_start: '19:00:00'
      time_end: 07:00:00
      house_occupancy: sensor.house_status
      enable_switch: input_boolean.enable_heater_sofia
      smart_plug: switch.heater_sofia
      power_meter: sensor.power_heater_sofia
      demand_power: 1000
      temp_sensor: sensor.temp_sofia
- id: '1630971724133'
  alias: Climate - Auto Heater Joseph
  description: ''
  use_blueprint:
    path: auto_heaters.yaml
    input:
      climate_entity: climate.joseph_bedroom
      house_occupancy: sensor.house_status
      enable_switch: input_boolean.enable_heater_joseph
      smart_plug: switch.heater_joseph
      time_start: '19:00:00'
      time_end: 07:00:00
      demand_power: 1000
      power_meter: sensor.power_heater_joseph
      temp_sensor: sensor.temp_joseph
- id: '1630971763040'
  alias: Climate - Auto Heater Theo
  description: ''
  use_blueprint:
    path: auto_heaters.yaml
    input:
      climate_entity: climate.theo_bedroom
      time_start: '18:00:00'
      time_end: 07:00:00
      house_occupancy: sensor.house_status
      enable_switch: input_boolean.enable_heater_theo
      smart_plug: switch.heater_theo
      power_meter: sensor.power_heater_theo
      demand_power: 1000
      temp_sensor: sensor.temp_theo
- id: '1631099598325'
  alias: Silence Doorbell
  description: ''
  trigger:
  - platform: time
    at: '19:00:00'
  - platform: time
    at: 07:00:00
  - platform: state
    entity_id: switch.doorbell_chime
    from: unavailable
  action:
  - choose:
    - conditions:
      - condition: time
        after: '19:00:00'
        before: 07:00:00
      sequence:
      - service: switch.turn_off
        target:
          entity_id: switch.doorbell_chime
    - conditions:
      - condition: time
        after: 07:00:00
        before: '19:00:00'
      - condition: template
        value_template: '{{ states.switch.doorbell_chime.context.user_id == None }}'
      sequence:
      - service: switch.turn_on
        target:
          entity_id: switch.doorbell_chime
  mode: single
  max_exceeded: silent
- id: '1631099793227'
  alias: Notify - Doorbell
  description: ''
  trigger:
  - platform: state
    entity_id: binary_sensor.doorbell
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.mobile_notifications
    state: 'on'
  action:
  - service: notify.simon_zoey
    data:
      title: Ding Dong!
      message: Doorbell Pressed
      data:
        tag: notify_doorbell
        push:
          sound: doorbell.wav
  mode: single
- id: '1631139553218'
  alias: Modes - Holiday Mode
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.house_status
    to: Occupied
  - platform: state
    entity_id: sensor.house_status
    to: Vacant
    for: '16:00:00'
  - platform: numeric_state
    entity_id: proximity.home
    above: '100'
  action:
  - choose:
      conditions:
      - condition: state
        entity_id: sensor.house_status
        state: Vacant
      sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.holiday_mode
        data: {}
    default:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.holiday_mode
      data: {}
  mode: single
- id: '1631318144171'
  alias: Lights - On arrival / transition sunset
  description: Dim in the lights at sunset or at full brightness if arriving after
    sunset
  trigger:
  - platform: numeric_state
    entity_id: sun.sun
    attribute: elevation
    below: 7
    id: sunset
  - platform: state
    entity_id: sensor.house_status
    from: Vacant
    to: Occupied
    id: arrival
  condition:
  - condition: state
    entity_id: sensor.house_status
    state: Occupied
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: sunset
      sequence:
      - service: light.turn_on
        data:
          color_temp: 287
          brightness_pct: 100
          effect: none
          transition: 900
        target:
          entity_id: light.lamps_livingroom, light.bookshelf, light.lamp_frontroom
    - conditions:
      - condition: trigger
        id: arrival
      - condition: numeric_state
        entity_id: sun.sun
        attribute: elevation
        below: 7
      sequence:
      - service: light.turn_on
        data:
          entity_id: light.lamps_livingroom, light.bookshelf, light.lamp_frontroom
          color_temp: 287
          brightness_pct: 100
          effect: none
    default:
  mode: single
- id: '1631361844123'
  alias: Lights - Off when gone to bed
  description: ''
  trigger:
  - platform: template
    value_template: '{{ states.binary_sensor | selectattr(''attributes.device_class'',
      ''defined'') | selectattr("attributes.device_class", "eq","motion") | map(attribute="state")
      | select("eq", "on") | list | count > 0 }}'
  condition:
  - condition: state
    entity_id: binary_sensor.motion_master
    state: 'on'
  - condition: time
    after: '20:30:00'
    before: 09:00:00
  - condition: state
    entity_id: sun.sun
    state: below_horizon
  - condition: template
    value_template: '{{ is_state("light.lamps_livingroom", "on") or is_state("light.bookshelf",
      "on") or is_state("light.lamp_frontroom", "on") }}'
  - condition: state
    entity_id:
    - binary_sensor.tv_livingroom
    - binary_sensor.tv_frontroom
    - group.computers
    state: 'off'
  action:
  - wait_for_trigger:
    - platform: template
      value_template: '{{ states.binary_sensor | selectattr(''attributes.device_class'',
        ''defined'') | selectattr("attributes.device_class", "eq", "motion") | map(attribute="state")
        | select("eq", "on") | list | count == 0 }}'
      for: 00:03:00
    timeout: 02:30:00
  - service: light.turn_off
    data:
      transition: 30
    target:
      entity_id:
      - light.bookshelf
      - light.lamps_livingroom
      - light.lamp_frontroom
  mode: restart
- id: '1631368050042'
  alias: Lights - Auto Lights Living Room
  description: ''
  use_blueprint:
    path: auto_lights.yaml
    input:
      light_entity: light.lamps_livingroom, light.bookshelf
      begin_dim: '22:30:00'
      end_dim: '23:59:00'
      no_motion_wait: 3600
      min_brightness: 25
      motion_sensor: binary_sensor.occupancy_livingroom
- id: '1631593521972'
  alias: Modes - Guest Mode
  description: Automatically Set and Reset (except when manualy set) Guest Mode when
    Maria or John visiting
  trigger:
  - platform: state
    entity_id: zone.home
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ states.zone.home.attributes.persons | reject(''search'',''person.simon'')
          | reject(''search'', ''person.zoey'') | list | count > 0 }}'
      - condition: state
        entity_id: input_boolean.guest_mode
        state: 'off'
      sequence:
      - service: input_boolean.turn_on
        entity_id: input_boolean.guest_mode
    - conditions:
      - condition: template
        value_template: '{{ states.input_boolean.guest_mode.context.user_id == None
          }}'
      - condition: template
        value_template: '{{ states.zone.home.attributes.persons | reject(''search'',''person.simon'')
          | reject(''search'', ''person.zoey'') | list | count == 0 }}'
      sequence:
      - service: input_boolean.turn_off
        entity_id: input_boolean.guest_mode
  mode: single
  max_exceeded: silent
- id: '1631706621274'
  alias: Garage Door - Auto Open Simon
  description: Automatically open the garage door on arrival
  trigger:
  - platform: zone
    entity_id: person.simon
    zone: zone.home
    event: enter
    id: arriving
  - platform: zone
    entity_id: person.simon
    zone: zone.home
    event: leave
    id: leaving
  condition:
  - condition: state
    entity_id: binary_sensor.simon_focus
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: arriving
      - condition: state
        entity_id: cover.garage_door
        state: closed
      sequence:
      - service: cover.open_cover
        target:
          entity_id: cover.garage_door
    - conditions:
      - condition: trigger
        id: leaving
      - condition: state
        entity_id: sensor.house_status
        state: Vacant
      - condition: state
        entity_id: cover.garage_door
        state: open
      sequence:
      - service: cover.close_cover
        target:
          entity_id: cover.garage_door
- id: '1631854800555'
  alias: Grandfather Clock
  trigger:
  - platform: time_pattern
    hours: '*'
  condition:
  - condition: state
    entity_id: sensor.house_status
    state: Occupied
  - condition: template
    value_template: '{{ not is_state(''media_player.audio_only'', ''playing'') }}'
  - condition: template
    value_template: '{{ not is_state(''media_player.all_chromecasts'', ''playing'')
      }}'
  - condition: template
    value_template: '{{ not is_state(''media_player.music'', ''playing'') }}'
  - condition: template
    value_template: '{{ not is_state(''person.zoey'', ''home'') }}'
  action:
  - service: script.disable_cast_chime
    data:
      target_entity: media_player.speaker_frontroom
  - wait_template: '{{ is_state(''script.disable_cast_chime'', ''off'') }}'
  - service: script.disable_cast_chime
    data:
      target_entity: media_player.living_room
  - wait_template: '{{ is_state(''script.disable_cast_chime'', ''off'') }}'
  - service: media_player.volume_set
    data_template:
      entity_id:
      - media_player.speaker_frontroom
      - media_player.living_room
      - media_player.livingroom_2
      volume_level: "{% if (now().strftime(\"%H\") | int) < 8 or (now().strftime(\"%H\")
        | int) > 18 %}\n  0.15\n{% else %}\n  0.35\n{% endif %}\n"
  - delay: 00:00:01
  - service: media_player.play_media
    target:
      entity_id: media_player.audio_only
    data:
      announce: true
      media_content_id: http://192.168.1.110:8123/local/sounds/GrandFatherChime{{now().strftime('%I')}}.mp3
      media_content_type: audio/mp4
  mode: single
- id: '1631870728951'
  alias: Garage Door - Auto Close
  description: ''
  trigger:
  - platform: state
    entity_id: cover.garage_door
    to: open
    for: 00:05:00
    id: timeout
  - platform: state
    entity_id: input_boolean.auto_garage_door
    to: 'on'
    id: enabled
  - platform: event
    event_type: call_service
    event_data:
      domain: cover
      service: close_cover
      service_data:
        entity_id: cover.garage_door
    id: closed
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: GARAGE_CLOSE
    id: close_garage
  - platform: state
    entity_id: cover.garage_door
    from: open
    to: closed
    id: door_closed
  condition:
  action:
  - wait_template: '{{ is_state(''binary_sensor.ford_escape'', ''off'') }}

      '
  - wait_template: '{{ ((states(''sensor.garage_no_motion'') | int) > 4) or is_state(''cover.garage_door'',''closed'')
      }}

      '
  - choose:
    - conditions:
      - condition: state
        entity_id: input_boolean.auto_garage_door
        state: 'on'
      - condition: trigger
        id: close_garage
      sequence:
      - service: cover.close_cover
        target:
          entity_id: cover.garage_door
        data: {}
      - delay: 00:00:40
    - conditions:
      - condition: state
        entity_id: input_boolean.auto_garage_door
        state: 'on'
      - condition: trigger
        id: closed
      sequence:
      - wait_for_trigger:
        - platform: state
          entity_id: cover.garage_door
          to: closed
        timeout: 00:00:45
      - if:
        - condition: template
          value_template: '{{ is_state(''cover.garage_door'', ''open'') }}'
        then:
        - service: notify.mobile_app_simon
          data:
            message: Garage door failed to close automatically
            data:
              entity_id: camera.garage
              actions:
              - action: GARAGE_CLOSE
                title: Close Garage
              - action: GARAGE_DISMISS
                title: Dismiss
              push:
              sound:
                name: default
                critical: 1
                volume: 1
    - conditions:
      - condition: state
        entity_id: input_boolean.auto_garage_door
        state: 'on'
      - condition: state
        entity_id: cover.garage_door
        state: open
      - condition: state
        entity_id: input_boolean.auto_garage_door
        state: 'on'
      sequence:
      - service: cover.close_cover
        target:
          entity_id: cover.garage_door
        data: {}
    - conditions:
      - condition: trigger
        id: door_closed
      - condition: state
        entity_id: input_boolean.auto_garage_door
        state: 'off'
      sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.auto_garage_door
  mode: queued
  max_exceeded: silent
- id: '1631939546843'
  alias: Set Theme on startup
  trigger:
  - platform: homeassistant
    event: start
  action:
  - service: frontend.set_theme
    data:
      name: slate
  initial_state: true
  mode: single
- id: '1632400430196'
  alias: Speech - Waste Collection
  description: ''
  trigger:
  - platform: calendar
    event: start
    offset: -04:30:00
    entity_id: calendar.garbage_collection
  condition:
  - condition: template
    value_template: '{{ trigger.calendar_event.summary == ''Rubbish'' or trigger.calendar_event.summary
      == ''Rubbish & Recycling'' }}'
  - condition: state
    entity_id: input_boolean.audible_notifications
    state: 'on'
  - condition: state
    entity_id: sensor.garbage_bin
    state: garage
  action:
  - wait_for_trigger:
    - platform: state
      entity_id: binary_sensor.motion_livingroom
      to: 'on'
  - service: media_player.volume_set
    data_template:
      entity_id:
      - media_player.audio_only
      volume_level: 0.7
  - service: media_player.play_media
    data:
      entity_id: media_player.audio_only
      media_content_id: "{% if trigger.calendar_event.summary == \"Rubbish & Recycling\"
        \ %}\n  http://192.168.1.110:8123/local/sounds/WasteCollectionRubbishRecycling.mp3\n{%
        elif trigger.calendar_event.summary == \"Rubbish\" %}\n  http://192.168.1.110:8123/local/sounds/WasteCollectionRubbish.mp3\n{%
        endif %}\n"
      media_content_type: audio/mp3
  - service: media_player.volume_set
    data_template:
      entity_id:
      - media_player.audio_only
      volume_level: 0.4
  mode: restart
  max_exceeded: silent
- id: '1632476399006'
  alias: Audio - Follow Me
  description: ''
  trigger:
  - platform: state
    id: motion_on
    to: 'on'
    entity_id:
    - binary_sensor.motion_master
    - binary_sensor.motion_frontroom
    - binary_sensor.motion_livingroom
  - platform: state
    id: motion_off
    to: 'off'
    for: 00:01:00
    entity_id:
    - binary_sensor.motion_master
    - binary_sensor.motion_frontroom
    - binary_sensor.motion_livingroom
  condition:
  - condition: state
    entity_id: media_player.all_chromecasts
    state: playing
  - condition: state
    entity_id: input_boolean.follow_me_audio
    state: 'on'
  - condition: template
    value_template: '{{ states.automation.grandfather_clock.attributes.current ==
      0 }}'
  - condition: template
    value_template: '{{ states.zone.home.attributes.persons | list | count == 1 }}'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      sequence:
      - service: media_player.volume_mute
        data_template:
          is_volume_muted: false
          entity_id: "{% if trigger.entity_id == 'binary_sensor.motion_master' %}\n
            \ media_player.speaker_bedroom\n{% elif trigger.entity_id == 'binary_sensor.motion_frontroom'
            %}\n  media_player.speaker_frontroom\n{% elif trigger.entity_id == 'binary_sensor.motion_livingroom'
            %}\n  media_player.display_kitchen, media_player.speaker_livingroom\n{%
            endif %}\n"
    - conditions:
      - condition: trigger
        id: motion_off
      - condition: template
        value_template: "{% set count = namespace(not_muted = 0) %}  {% for player
          in expand('group.all_chromecasts') | map(attribute='entity_id') %}\n  {%
          if state_attr(player, 'is_volume_muted') == False %}\n    {% set count.not_muted
          = count.not_muted + 1 %}\n  {% endif %}\n{% endfor %}    {% if trigger.entity_id
          == 'binary_sensor.motion_livingroom' %}\n  {{ count.not_muted | int > 2
          }}\n{% else %}\n  {{ count.not_muted | int > 1 }}\n{% endif %}\n"
      sequence:
      - service: media_player.volume_mute
        data_template:
          is_volume_muted: true
          entity_id: "{% if trigger.entity_id == 'binary_sensor.motion_master' %}\n
            \ media_player.speaker_bedroom\n{% elif trigger.entity_id == 'binary_sensor.motion_frontroom'
            %}\n  media_player.speaker_frontroom\n{% elif trigger.entity_id == 'binary_sensor.motion_livingroom'
            %}\n  media_player.display_kitchen, media_player.speaker_livingroom\n{%
            endif %}\n"
  mode: queued
  max_exceeded: silent
- id: '1635649936935'
  alias: iOS - Garage Door
  description: ''
  trigger:
  - platform: event
    event_type: ios.action_fired
    event_data:
      actionName: toggle_garage
    context:
      user_id:
      - 8cf5ca26368a47578d759264b2ceaf98
      - 9a78e16d6589444cbdf82944e76f59fd
  condition: []
  action:
  - service: cover.toggle
    target:
      entity_id: cover.garage_door
    data: {}
  mode: single
- id: '1650274609927'
  alias: Lights - Auto Lights Sofia
  trigger:
  - platform: state
    entity_id: binary_sensor.motion_sofia
    to: 'on'
    id: motion_on
  - platform: state
    entity_id: binary_sensor.motion_sofia
    to: 'off'
    for: 00:03:00
    id: motion_off
  - platform: state
    entity_id: binary_sensor.sleep_sofia
    to: 'off'
    id: awake
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      - condition: numeric_state
        entity_id: sensor.lux_sofia
        below: 20
      - condition: numeric_state
        entity_id: counter.sleep_motion_sofia
        below: 1
      sequence:
      - service: light.turn_on
        data:
          brightness_pct: 100
          color_temp: 370
        target:
          entity_id: light.lamp_sofia
      - if:
        - condition: state
          entity_id: binary_sensor.sleep_sofia
          state: 'on'
        then:
        - service: counter.increment
          data: {}
          target:
            entity_id: counter.sleep_motion_sofia
    - conditions:
      - condition: trigger
        id: motion_off
      - condition: state
        entity_id: binary_sensor.sleep_sofia
        state: 'off'
      sequence:
      - service: light.turn_off
        target:
          entity_id: light.lamp_sofia
        data: {}
    - conditions:
      - condition: trigger
        id: awake
      sequence:
      - service: counter.reset
        data: {}
        target:
          entity_id: counter.sleep_motion_sofia
  mode: single
- id: '1650275312000'
  alias: Lights - Auto Lights Joseph
  trigger:
  - platform: state
    entity_id: binary_sensor.motion_joseph
    to: 'on'
    id: motion_on
  - platform: state
    entity_id: binary_sensor.motion_joseph
    to: 'off'
    for: 00:03:00
    id: motion_off
  - platform: state
    entity_id: binary_sensor.sleep_joseph
    to: 'off'
    id: awake
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      - condition: numeric_state
        entity_id: sensor.lux_joseph
        below: 20
      - condition: numeric_state
        entity_id: counter.sleep_motion_joseph
        below: 1
      sequence:
      - service: light.turn_on
        data:
          brightness_pct: 100
          color_temp: 370
        target:
          entity_id: light.lamp_joseph
      - if:
        - condition: state
          entity_id: binary_sensor.sleep_joseph
          state: 'on'
        then:
        - service: counter.increment
          data: {}
          target:
            entity_id: counter.sleep_motion_joseph
    - conditions:
      - condition: trigger
        id: motion_off
      - condition: state
        entity_id: light.lamp_joseph
        state: 'on'
      sequence:
      - if:
        - condition: state
          entity_id: binary_sensor.sleep_joseph
          state: 'on'
        then:
        - service: light.turn_on
          data:
            transition: 3
            brightness_pct: 20
          target:
            entity_id: light.lamp_joseph
        else:
        - service: light.turn_off
          target:
            entity_id: light.lamp_joseph
          data: {}
    - conditions:
      - condition: trigger
        id: awake
      sequence:
      - service: counter.reset
        data: {}
        target:
          entity_id: counter.sleep_motion_joseph
  mode: single
- id: '1650275433270'
  alias: Lights - Auto Lights Theo
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.motion_theo
    - binary_sensor.motion_theo_dsc
    to: 'on'
    id: motion_on
  - platform: state
    entity_id:
    - binary_sensor.motion_theo
    - binary_sensor.motion_theo_dsc
    to: 'off'
    for: 00:03:00
    id: motion_off
  - platform: state
    entity_id: binary_sensor.sleep_theo
    to: 'off'
    id: awake
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      - condition: numeric_state
        entity_id: sensor.lux_theo
        below: 25
      - condition: numeric_state
        entity_id: counter.sleep_motion_theo
        below: 1
      sequence:
      - service: light.turn_on
        data:
          brightness_pct: 100
          color_temp: 370
        target:
          entity_id: light.lamp_theo
      - if:
        - condition: state
          entity_id: binary_sensor.sleep_theo
          state: 'on'
        then:
        - service: counter.increment
          data: {}
          target:
            entity_id: counter.sleep_motion_theo
    - conditions:
      - condition: trigger
        id: motion_off
      - condition: state
        entity_id: light.lamp_theo
        state: 'on'
      sequence:
      - if:
        - condition: state
          entity_id: binary_sensor.sleep_theo
          state: 'on'
        then:
        - service: light.turn_on
          data:
            rgb_color:
            - 17
            - 5
            - 59
            brightness_pct: 20
          target:
            entity_id: light.lamp_theo
        else:
        - service: light.turn_off
          target:
            entity_id: light.lamp_theo
          data: {}
    - conditions:
      - condition: trigger
        id: awake
      sequence:
      - service: counter.reset
        data: {}
        target:
          entity_id: counter.sleep_motion_theo
  mode: restart
- id: '1652612892418'
  alias: Lights - Wake Up
  description: ''
  trigger:
  - platform: time
    at: 05:45:00
  condition:
  - condition: state
    entity_id: binary_sensor.workday_sensor
    state: 'on'
  - condition: state
    entity_id: sensor.house_status
    state: Occupied
  action:
  - service: light.turn_on
    data:
      brightness_pct: 1
      rgbw_color:
      - 255
      - 66
      - 2
      - 0
    target:
      entity_id: light.bedroom_lamps
  - delay: 5
  - service: light.turn_on
    data:
      brightness_pct: 30
      transition: 600
      rgbw_color:
      - 255
      - 128
      - 26
      - 0
    target:
      entity_id: light.bedroom_lamps
  - delay: 600
  - service: light.turn_on
    data:
      brightness_pct: 100
      transition: 300
      rgbw_color:
      - 255
      - 255
      - 255
      - 0
    target:
      entity_id: light.bedroom_lamps
  - delay: 1200
  mode: restart
- id: '1652932636182'
  alias: Speech - Morning Greeting
  description: ''
  trigger:
  - platform: numeric_state
    entity_id: sensor.wattage_coffee_machine
    above: 20
  condition:
  - condition: time
    after: 05:45:00
    before: '10:00:00'
  - condition: template
    value_template: '{{ states.automation.morning_greeting.attributes.last_triggered
      < today_at(''05:45:00'') }}'
  action:
  - service: media_player.volume_set
    data_template:
      entity_id: media_player.display_kitchen
      volume_level: 0.45
  - service: script.turn_on
    target:
      entity_id: script.morning_greeting
    data: {}
  mode: restart
- id: '1653202825683'
  alias: Lights - Simulated Holiday Lighting
  description: Random lighting to simulate occupancy during holiday mode
  trigger:
  - platform: state
    entity_id: sun.sun
    to: below_horizon
  condition:
  - condition: state
    entity_id: input_boolean.holiday_mode
    state: 'on'
  action:
  - repeat:
      until:
      - condition: time
        after: '23:00:00'
        before: 06:00:00
      sequence:
      - service: light.toggle
        data:
          entity_id: '{{ expand(''light.holiday_lights'') | map(attribute=''entity_id'')
            | list | random }}

            '
          brightness_pct: 100
      - delay:
          minutes: '{{ range(1,10) | random | int }}'
  - service: light.turn_off
    entity_id: all
  mode: single
- id: '1653371737527'
  alias: Speech - People Travelling Home
  description: ''
  trigger:
  - platform: state
    entity_id: person.zoey
    from: Work
    to: not_home
    id: Zoey
  - platform: state
    entity_id: person.simon
    from: Work
    to: not_home
    id: Simon
  condition:
  - condition: state
    entity_id: sensor.house_status
    state: Occupied
  - condition: state
    entity_id: input_boolean.audible_notifications
    state: 'on'
  - condition: time
    after: '15:00:00'
    before: '20:00:00'
  action:
  - service: tts.cloud_say
    data:
      message: "{% if trigger.id == 'Simon' %}\n  {% set eta = states.sensor.simon_commute_home.state
        %}\n{% else %}\n  {% set eta = states.sensor.zoey_commute_home.state %}\n{%
        endif %} {{ trigger.id }} is travelling home from work. Expected time of arrival
        is in {{ eta }} minutes time\"\n"
      entity_id: media_player.audio_only
  mode: single
- id: '1654267729698'
  alias: Modes - Sentry Mode
  description: Automatically arms security system when house vacant and notifies of
    breach
  trigger:
  - platform: state
    entity_id: sensor.house_status
    to: Vacant
    id: house_vacant
  - platform: state
    entity_id: sensor.house_status
    to: Occupied
    id: house_occupied
  - platform: state
    entity_id: sensor.alarm_armstatus
    to: Triggered
    id: alarm_triggered
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: SENTRY_GUEST
    id: enable_guest
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: SENTRY_DISARM
    id: disable_sentry
  - platform: event
    event_type: mobile_app_notification_action action
  - platform: homeassistant
    event: start
    id: startup
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - house_vacant
        - house_occupied
        - startup
      - condition: state
        entity_id: sensor.house_status
        state: Vacant
      sequence:
      - alias: Wait until no motion detected
        wait_template: '{{ states.binary_sensor | selectattr(''attributes.device_class'',
          ''defined'') | selectattr(''attributes.device_class'', ''eq'', ''motion'')
          | map(attribute=''state'') | select(''eq'', ''on'') | list | count == 0
          }}'
      - service: "{% if int(state_attr('sensor.last_home', 'delta_minutes')) < 5 %}\n
          \ notify.mobile_app_simon\n{% elif states('sensor.last_home') == 'Simon'
          %}\n  notify.mobile_app_simon\n{% elif states('sensor.last_home') == 'Zoey'
          %}\n  notify.mobile_app_zoey\n{% else %}\n  notify.simon_zoey\n{% endif
          %}\n"
        data:
          title: Sentry Mode - Arming
          message: Activating in 3 minutes, tap and hold for options
          data:
            actions:
            - action: SENTRY_GUEST
              title: Enable Guest Mode
              authenticationRequired: true
            - action: SENTRY_DISARM
              title: Cancel Senty Mode
              authenticationRequired: true
            push:
            tag: notify_sentry_arming
            sound:
              name: default
              critical: 1
              volume: 1
      - wait_for_trigger:
        - platform: event
          event_type: mobile_app_notification_action
          event_data:
            action: SENTRY_DISARM
        - platform: event
          event_type: mobile_app_notification_action
          event_data:
            action: SENTRY_GUEST
        - platform: state
          entity_id: sensor.house_status
          to: Occupied
        timeout: 00:03:00
      - if:
        - condition: template
          value_template: '{{ wait.trigger.idx is not defined }}'
        then:
        - service: input_boolean.turn_on
          target:
            entity_id: input_boolean.sentry_mode
          data: {}
        - service: notify.simon_zoey
          data:
            message: clear_notification
            data:
              tag: notify_sentry_arming
    - conditions:
      - condition: trigger
        id:
        - house_vacant
        - house_occupied
        - startup
      - condition: state
        entity_id: sensor.house_status
        state: Occupied
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.sentry_mode
        data: {}
    - conditions:
      - condition: trigger
        id:
        - alarm_triggered
      - condition: state
        entity_id: input_boolean.sentry_mode
        state: 'on'
      sequence:
      - service: notify.sms_simon
        data:
          message: Alarm System Triggered
      - service: notify.mobile_app_simon
        data:
          title: Sentry Mode - Triggered
          message: Security Alarm Triggered, tap and hold for options
          data:
            actions:
            - action: SENTRY_GUEST
              title: Enable Guest Mode
              authenticationRequired: true
            - action: SENTRY_DISARM
              title: Disable Senty Mode
              authenticationRequired: true
            push:
            sound:
              name: default
              critical: 1
              volume: 1
    - conditions:
      - condition: trigger
        id: dismiss
      sequence:
    - conditions:
      - condition: trigger
        id: enable_guest
      sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.guest_mode
        data: {}
    - conditions:
      - condition: trigger
        id: disable_sentry
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.sentry_mode
        data: {}
  mode: queued
- id: '1654433824986'
  alias: Modes - Audible Notifications
  description: Automatically Set and Reset (except when manualy set) Audible Notifications
    based on quiet time
  trigger:
  - platform: state
    entity_id: binary_sensor.quiet_time
  - platform: homeassistant
    event: start
  condition: []
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.quiet_time
        state: 'off'
      - condition: template
        value_template: '{{ states.input_boolean.audible_notifications.context.user_id
          == None }}'
      sequence:
      - service: input_boolean.turn_on
        entity_id: input_boolean.audible_notifications
    - conditions:
      - condition: state
        entity_id: binary_sensor.quiet_time
        state: 'on'
      sequence:
      - service: input_boolean.turn_off
        entity_id: input_boolean.audible_notifications
  mode: single
  max_exceeded: silent
- id: '1654512990915'
  alias: Speech - Internet Connection
  description: Audible Notification when internet connected is down/restored
  trigger:
  - platform: state
    entity_id: binary_sensor.internet
    to: 'off'
    for: 00:01:00
  - platform: state
    entity_id: binary_sensor.internet
    to: 'on'
  condition:
  - condition: state
    entity_id: sensor.house_status
    state: Occupied
  - condition: state
    entity_id: input_boolean.audible_notifications
    state: 'on'
  action:
  - service: media_player.volume_set
    data_template:
      entity_id:
      - media_player.audio_only
      volume_level: 0.4
  - service: media_player.play_media
    data:
      entity_id: media_player.audio_only
      media_content_id: "{% if states.binary_sensor.internet.state == 'off' %}\n  http://192.168.1.110:8123/local/sounds/internet_disconnected.mp3\n{%
        else %}\n  http://192.168.1.110:8123/local/sounds/internet_restored.mp3\n{%
        endif %}\n"
      media_content_type: audio/mp3
  mode: queued
- id: '1654777796403'
  alias: Lights - Auto Lights Master Bedroom
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.motion_master
    - binary_sensor.motion_master_dsc
    to: 'on'
    id: motion
  - platform: state
    entity_id:
    - binary_sensor.sleep_simon
    - binary_sensor.sleep_zoey
    to: 'on'
    id: sleeping
  - platform: state
    entity_id:
    - binary_sensor.motion_master
    - binary_sensor.motion_master_dsc
    to: 'off'
    id: motion_off
  condition:
  - condition: template
    value_template: '{{ states.automation.lights_wake_up.attributes.current == 0 }}'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion
      - condition: numeric_state
        entity_id: sensor.lux_master
        below: 15
      sequence:
      - service: light.turn_on
        data:
          color_temp: 366
          brightness_pct: "{% if (is_state('binary_sensor.sleep_simon', 'on') or not
            is_state('person.simon', 'home')) and (is_state('binary_sensor.sleep_zoey',
            'on') or not is_state('person.zoey','home')) %}\n  0\n{% elif is_state('binary_sensor.sleep_simon',
            'on') or is_state('binary_sensor.sleep_zoey', 'on') and (states('sensor.time')
            < '08:00:00' or states('sensor.time') > '21:00:00') %}\n  1\n{% elif (states('sensor.time')
            > '21:00:00') or (states('sensor.time') < '08:00:00') %}\n  75\n{% else
            %}\n  100\n{% endif %}\n"
        target:
          entity_id: light.bedroom_lamps
    - conditions:
      - condition: trigger
        id:
        - motion_off
        - sleeping
      sequence:
      - delay: "{% if is_state('binary_sensor.sleep_simon', 'on') or is_state('binary_sensor.sleep_zoey',
          'on') %}\n  10\n{% else %}\n  300\n{% endif %}\n"
      - service: light.turn_off
        data:
          transition: 5
        target:
          entity_id: light.bedroom_lamps
  mode: restart
- id: '1655008732481'
  alias: Button - Sofia
  description: ''
  trigger:
  - device_id: cda85d7d01c831a383bb4d6fa162deb8
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: remote_button_short_press
    id: single_press
  - device_id: cda85d7d01c831a383bb4d6fa162deb8
    domain: zha
    platform: device
    type: remote_button_double_press
    subtype: remote_button_double_press
    id: double_press
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: double_press
      - condition: template
        value_template: '{{ states.light.lamp_sofia.attributes.brightness > 127 }}'
      sequence:
      - service: light.turn_on
        data:
          brightness_pct: 1
        target:
          entity_id: light.lamp_sofia
    - conditions:
      - condition: trigger
        id: double_press
      - condition: template
        value_template: '{{ states.light.lamp_sofia.attributes.brightness < 127 }}'
      sequence:
      - service: light.turn_on
        data:
          brightness_pct: 100
        target:
          entity_id: light.lamp_sofia
    default:
    - service: light.toggle
      data: {}
      target:
        entity_id: light.lamp_sofia
  mode: single
- id: '1655009177755'
  alias: Button - Joseph
  description: ''
  trigger:
  - device_id: aca57e3cf8a9034990bd021fb063e64b
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: remote_button_short_press
    id: single_press
  - device_id: aca57e3cf8a9034990bd021fb063e64b
    domain: zha
    platform: device
    type: remote_button_double_press
    subtype: remote_button_double_press
    id: double_press
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: double_press
      - condition: template
        value_template: '{{ states.light.lamp_joseph.attributes.brightness > 127 }}'
      sequence:
      - service: light.turn_on
        data:
          color_temp: 370
          brightness_pct: 10
        target:
          entity_id: light.lamp_joseph
    - conditions:
      - condition: trigger
        id: double_press
      - condition: template
        value_template: '{{ states.light.lamp_joseph.attributes.brightness < 127 }}'
      sequence:
      - service: light.turn_on
        data:
          color_temp: 370
          brightness_pct: 100
        target:
          entity_id: light.lamp_joseph
    default:
    - service: light.toggle
      data: {}
      target:
        entity_id: light.lamp_joseph
  mode: single
- id: '1655010066614'
  alias: Button - Theo
  description: ''
  trigger:
  - device_id: 95b6df22185febad013a3ddb996291d4
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: remote_button_short_press
    id: single_press
  - device_id: 95b6df22185febad013a3ddb996291d4
    domain: zha
    platform: device
    type: remote_button_double_press
    subtype: remote_button_double_press
    id: double_press
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: double_press
      - condition: template
        value_template: '{{ states.light.lamp_theo.attributes.brightness > 127 }}'
      sequence:
      - service: light.turn_on
        data:
          brightness_pct: 1
        target:
          entity_id: light.lamp_theo
    - conditions:
      - condition: trigger
        id: double_press
      - condition: template
        value_template: '{{ states.light.lamp_theo.attributes.brightness < 127 }}'
      sequence:
      - service: light.turn_on
        data:
          brightness_pct: 100
        target:
          entity_id: light.lamp_theo
    default:
    - service: light.toggle
      data: {}
      target:
        entity_id: light.lamp_theo
  mode: single
- id: '1655010604077'
  alias: Lights - Laundry
  description: Automatically Turn on/off the Laundry light with motion
  trigger:
  - platform: state
    entity_id: binary_sensor.motion_laundry
    to: 'on'
    id: motion_on
  - platform: state
    entity_id: binary_sensor.motion_laundry
    to: 'off'
    for: 00:01:00
    id: motion_off
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      sequence:
      - service: light.turn_on
        target:
          entity_id: light.laundry
        data: {}
    - conditions:
      - condition: trigger
        id: motion_off
      sequence:
      - service: light.turn_off
        target:
          entity_id: light.laundry
        data: {}
  mode: restart
- id: '1655451822000'
  alias: Sunrise
  description: ''
  trigger:
  - platform: numeric_state
    entity_id: sun.sun
    attribute: elevation
    above: 7
    id: sunrise
  action:
  - service: light.turn_off
    target:
      entity_id:
      - light.lamp_sofia
      - light.lamp_joseph
      - light.lamp_theo
      - light.lamps_livingroom
      - light.bookshelf
      - light.lamp_frontroom
    data: {}
  mode: single
- id: '1655515573815'
  alias: iOS - Theo Bedtime
  description: ''
  trigger:
  - platform: event
    event_type: ios.action_fired
    event_data:
      actionName: theo_bedtime
    context:
      user_id:
      - 8cf5ca26368a47578d759264b2ceaf98
      - 9a78e16d6589444cbdf82944e76f59fd
  condition: []
  action:
  - service: script.turn_on
    data: {}
    target:
      entity_id: script.theo_bedtime
  mode: single
- id: '1655524498497'
  alias: iOS - Sentry Mode
  description: ''
  trigger:
  - platform: event
    event_type: ios.action_fired
    event_data:
      actionName: sentry_mode
    context:
      user_id:
      - 8cf5ca26368a47578d759264b2ceaf98
      - 9a78e16d6589444cbdf82944e76f59fd
  action:
  - service: input_boolean.toggle
    data: {}
    target:
      entity_id: input_boolean.sentry_mode
  mode: single
- id: '1655524543280'
  alias: iOS - Guest Mode
  description: ''
  trigger:
  - platform: event
    event_type: ios.action_fired
    event_data:
      actionName: guest_mode
    context:
      user_id:
      - 8cf5ca26368a47578d759264b2ceaf98
      - 9a78e16d6589444cbdf82944e76f59fd
  condition: []
  action:
  - service: input_boolean.toggle
    data: {}
    target:
      entity_id: input_boolean.guest_mode
  mode: single
- id: '1655614243703'
  alias: Button - Garage Door
  description: Button for Garage Door at front door entrance
  trigger:
  - device_id: fb5d4966b1db5d9ab488158888ef7a0b
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: turn_on
    id: garage_open
  - device_id: fb5d4966b1db5d9ab488158888ef7a0b
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: turn_off
    id: garage_close
  - device_id: fb5d4966b1db5d9ab488158888ef7a0b
    domain: zha
    platform: device
    type: remote_button_long_press
    subtype: dim_up
    id: disable_auto_door
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: disable_auto_door
      sequence:
      - if:
        - condition: state
          entity_id: cover.garage_door
          state: closed
        then:
        - service: cover.open_cover
          target:
            entity_id: cover.garage_door
          data: {}
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.auto_garage_door
        data: {}
    - conditions:
      - condition: trigger
        id: garage_open
      - condition: state
        entity_id: cover.garage_door
        state: closed
      sequence:
      - service: cover.open_cover
        target:
          entity_id: cover.garage_door
        data: {}
    - conditions:
      - condition: trigger
        id: garage_close
      - condition: state
        entity_id: cover.garage_door
        state: open
      sequence:
      - service: cover.close_cover
        target:
          entity_id: cover.garage_door
        data: {}
  mode: single
- id: '1656634542242'
  alias: Modes - Doorbell Chime
  description: Automatically Set and Reset (except when manualy set) Doorbell Chime
    based on quiet time
  trigger:
  - platform: time
    at: '19:00:00'
    id: chime_off
  - platform: time
    at: 07:30:00
    id: chime_on
  - platform: homeassistant
    event: start
  - platform: state
    entity_id: input_boolean.doorbell_chime
    to: 'on'
    id: sound_on
  - platform: state
    entity_id: input_boolean.doorbell_chime
    to: 'off'
    id: sound_off
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: sound_on
      sequence:
      - service: number.set_value
        data:
          value: '0.5'
        target:
          entity_id: number.volume_doorbell
    - conditions:
      - condition: trigger
        id: sound_off
      sequence:
      - service: number.set_value
        data:
          value: '0.01'
        target:
          entity_id: number.volume_doorbell
    - conditions:
      - condition: time
        after: 07:30:00
        before: '19:00:00'
      - condition: template
        value_template: '{{ states.input_boolean.doorbell_chime.context.user_id ==
          None }}'
      sequence:
      - service: input_boolean.turn_on
        entity_id: input_boolean.doorbell_chime
    - conditions:
      - condition: time
        after: '19:00:00'
        before: 07:30:00
      sequence:
      - service: input_boolean.turn_off
        entity_id: input_boolean.doorbell_chime
  mode: queued
  max_exceeded: silent
- id: '1663132676550'
  alias: Alarm - Auto Arm/Disarm Sentry Mode
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.sentry_mode
    from: 'off'
    to: 'on'
    id: arm
  - platform: state
    entity_id:
    - input_boolean.sentry_mode
    from: 'on'
    to: 'off'
    id: disarm
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: arm
      sequence:
      - service: esphome.dscalarm_alarm_arm_away
        data: {}
    - conditions:
      - condition: trigger
        id: disarm
      sequence:
      - service: script.disarm_alarm
        data: {}
  mode: queued
- id: '1664341044791'
  alias: Sunset
  description: ''
  trigger:
  - platform: sun
    event: sunset
    offset: 00:15:00
  action:
  - service: input_boolean.turn_on
    target:
      entity_id:
      - input_boolean.enable_heater_joseph
      - input_boolean.enable_heater_sofia
      - input_boolean.enable_heater_theo
      - input_boolean.enable_heater_master
    data: {}
  mode: single
- id: '1669510834699'
  alias: Lights - Auto Lights Front Room
  description: Auto Lights Front Room
  use_blueprint:
    path: auto_lights.yaml
    input:
      light_entity: light.lamp_frontroom
      begin_dim: '22:00:00'
      end_dim: '23:59:00'
      no_motion_wait: 180
      min_brightness: 5
      motion_sensor: binary_sensor.occupancy_frontroom
- id: '1674517769621'
  alias: Notify - Waste Collection
  description: ''
  trigger:
  - platform: calendar
    event: start
    offset: -05:30:00
    entity_id: calendar.garbage_collection
  condition:
  - condition: template
    value_template: '{{ trigger.calendar_event.summary == ''Rubbish'' or trigger.calendar_event.summary
      == ''Rubbish & Recycling'' }}'
  - condition: state
    entity_id: input_boolean.mobile_notifications
    state: 'on'
  - condition: state
    entity_id: sensor.garbage_bin
    state: garage
  action:
  - service: notify.simon_zoey
    data:
      title: Waste Collection Tomorrow
      message: "{% if trigger.calendar_event.summary == \"Rubbish & Recycling\"  %}\n
        \ Rubbish and Recycling Bins\n{% elif trigger.calendar_event.summary == \"Rubbish\"
        %}\n  Rubbish Bin Only\n{% endif %}\n"
  mode: restart
  max_exceeded: silent
- id: '1674537634620'
  alias: Keep Speakers Alive
  description: ''
  trigger:
  - platform: state
    entity_id: media_player.audio_only
    to: idle
    for: 00:04:00
  - platform: homeassistant
    event: start
  condition:
  - condition: template
    value_template: '{{ not is_state(''media_player.audio_only'', ''playing'') }}'
  action:
  - service: media_player.play_media
    data:
      entity_id: media_player.audio_only
      media_content_id: http://192.168.1.110:8123/local/sounds/silence.mp3
      media_content_type: audio/mp3
  mode: single
- id: '1674890994424'
  alias: Fan - Auto Fan Sofia
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.motion_sofia
    from: 'off'
    to: 'on'
    id: motion_on
  - platform: state
    entity_id: sensor.temp_sofia
    id: speed_adjust
  - platform: state
    entity_id: binary_sensor.motion_sofia
    from: 'on'
    to: 'off'
    for: 00:15:00
    id: motion_off
  condition:
  - condition: template
    value_template: '{% set fan_off = is_state(''fan.sofia'', ''off'') %} {% set via_remote
      = states.fan.sofia.context.parent_id == none and states.fan.sofia.context.user_id
      == none %} {% set sleeping = is_state(''binary_sensor.sleep_sofia'', ''on'')
      %} {{ not (sleeping and fan_off and via_remote) }}'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      - condition: state
        entity_id: fan.sofia
        state: 'off'
      sequence:
      - if:
        - condition: numeric_state
          entity_id: sensor.temp_sofia
          above: 25
        then:
        - service: fan.turn_on
          target:
            entity_id: fan.sofia
          data:
            percentage: "{% if float(states.sensor.temp_sofia.state) > 30 %}\n  100\n{%
              elif float(states.sensor.temp_sofia.state) > 28 %}\n  66\n{% elif float(states.sensor.temp_sofia.state)
              > 26 %}\n  33\n{% endif %}\n"
        else:
        - service: fan.turn_off
          target:
            entity_id: fan.sofia
          data: {}
      - service: fan.oscillate
        data:
          oscillating: true
        target:
          entity_id: fan.sofia
    - conditions:
      - condition: trigger
        id: speed_adjust
      - condition: template
        value_template: '{{ is_state(''fan.sofia'', ''on'') or is_state(''binary_sensor.sleep_sofia'',
          ''on'') }}'
      sequence:
      - if:
        - condition: numeric_state
          entity_id: sensor.temp_sofia
          above: 25
        then:
        - service: fan.turn_on
          target:
            entity_id: fan.sofia
          data:
            percentage: "{% if float(states.sensor.temp_sofia.state) > 30 %}\n  100\n{%
              elif float(states.sensor.temp_sofia.state) > 28 %}\n  66\n{% elif float(states.sensor.temp_sofia.state)
              > 26 %}\n  33\n{% endif %}\n"
        else:
        - service: fan.turn_off
          target:
            entity_id: fan.sofia
          data: {}
      - service: fan.oscillate
        data:
          oscillating: true
        target:
          entity_id: fan.sofia
    - conditions:
      - condition: trigger
        id: motion_off
      - condition: state
        entity_id: binary_sensor.sleep_sofia
        state: 'off'
      sequence:
      - service: fan.turn_off
        target:
          entity_id: fan.sofia
        data: {}
  mode: single
- id: '1674891111889'
  alias: Fan - Auto Fan Joseph
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.motion_joseph
    from: 'off'
    to: 'on'
    id: motion_on
  - platform: state
    entity_id: sensor.temp_joseph
    id: speed_adjust
  - platform: state
    entity_id: binary_sensor.motion_joseph
    from: 'on'
    to: 'off'
    for: 00:15:00
    id: motion_off
  condition:
  - condition: template
    value_template: '{% set fan_off = is_state(''fan.joseph'', ''off'') %} {% set
      via_remote = states.fan.joseph.context.parent_id == none and states.fan.joseph.context.user_id
      == none %} {% set sleeping = is_state(''binary_sensor.sleep_joseph'', ''on'')
      %} {{ not (sleeping and fan_off and via_remote) }}'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      - condition: state
        entity_id: fan.joseph
        state: 'off'
      sequence:
      - if:
        - condition: numeric_state
          entity_id: sensor.temp_joseph
          above: 25
        then:
        - service: fan.turn_on
          target:
            entity_id: fan.joseph
          data:
            percentage: "{% if float(states.sensor.temp_joseph.state) > 30 %}\n  100\n{%
              elif float(states.sensor.temp_joseph.state) > 28 %}\n  66\n{% elif float(states.sensor.temp_joseph.state)
              > 26 %}\n  33\n{% endif %}\n"
        else:
        - service: fan.turn_off
          target:
            entity_id: fan.joseph
          data: {}
      - service: fan.oscillate
        data:
          oscillating: true
        target:
          entity_id: fan.joseph
    - conditions:
      - condition: trigger
        id: speed_adjust
      - condition: template
        value_template: '{{ is_state(''fan.joseph'', ''on'') or is_state(''binary_sensor.sleep_joseph'',
          ''on'') }}'
      sequence:
      - if:
        - condition: numeric_state
          entity_id: sensor.temp_joseph
          above: 25
        then:
        - service: fan.turn_on
          target:
            entity_id: fan.joseph
          data:
            percentage: "{% if float(states.sensor.temp_joseph.state) > 30 %}\n  100\n{%
              elif float(states.sensor.temp_joseph.state) > 28 %}\n  66\n{% elif float(states.sensor.temp_joseph.state)
              > 26 %}\n  33\n{% endif %}\n"
        else:
        - service: fan.turn_off
          target:
            entity_id: fan.joseph
          data: {}
      - service: fan.oscillate
        data:
          oscillating: true
        target:
          entity_id: fan.joseph
    - conditions:
      - condition: trigger
        id: motion_off
      - condition: state
        entity_id: binary_sensor.sleep_joseph
        state: 'off'
      sequence:
      - service: fan.turn_off
        target:
          entity_id: fan.joseph
        data: {}
  mode: single
- id: '1674891223115'
  alias: Fan - Auto Fan Theo
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.motion_theo
    - binary_sensor.motion_theo_dsc
    from: 'off'
    to: 'on'
    id: motion_on
  - platform: state
    entity_id: sensor.temp_theo
    id: speed_adjust
  - platform: state
    entity_id:
    - binary_sensor.motion_theo
    - binary_sensor.motion_theo_dsc
    from: 'on'
    to: 'off'
    for: 00:15:00
    id: motion_off
  condition:
  - condition: template
    value_template: '{% set fan_off = is_state(''fan.theo'', ''off'') %} {% set via_remote
      = states.fan.theo.context.parent_id == none and states.fan.theo.context.user_id
      == none %} {% set sleeping = is_state(''binary_sensor.sleep_theo'', ''on'')
      %} {{ not (sleeping and fan_off and via_remote) }}'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      - condition: state
        entity_id: fan.theo
        state: 'off'
      sequence:
      - if:
        - condition: numeric_state
          entity_id: sensor.temp_theo
          above: 25
        then:
        - service: fan.turn_on
          target:
            entity_id: fan.theo
          data:
            percentage: "{% if float(states.sensor.temp_theo.state) > 30 %}\n  100\n{%
              elif float(states.sensor.temp_theo.state) > 28 %}\n  66\n{% elif float(states.sensor.temp_theo.state)
              > 26 %}\n  33\n{% endif %}\n"
        else:
        - service: fan.turn_off
          target:
            entity_id: fan.theo
          data: {}
      - service: fan.oscillate
        data:
          oscillating: true
        target:
          entity_id: fan.theo
    - conditions:
      - condition: trigger
        id: speed_adjust
      - condition: template
        value_template: '{{ is_state(''fan.theo'', ''on'') or is_state(''binary_sensor.sleep_theo'',
          ''on'') }}'
      sequence:
      - if:
        - condition: numeric_state
          entity_id: sensor.temp_theo
          above: 25
        then:
        - service: fan.turn_on
          target:
            entity_id: fan.theo
          data:
            percentage: "{% if float(states.sensor.temp_theo.state) > 30 %}\n  100\n{%
              elif float(states.sensor.temp_theo.state) > 28 %}\n  66\n{% elif float(states.sensor.temp_theo.state)
              > 26 %}\n  33\n{% endif %}\n"
        else:
        - service: fan.turn_off
          target:
            entity_id: fan.theo
          data: {}
      - service: fan.oscillate
        data:
          oscillating: true
        target:
          entity_id: fan.theo
    - conditions:
      - condition: trigger
        id: motion_off
      - condition: state
        entity_id: binary_sensor.sleep_theo
        state: 'off'
      sequence:
      - service: fan.turn_off
        target:
          entity_id: fan.theo
        data: {}
  mode: single
- id: '1674891301034'
  alias: Fan - Auto Fan Master Bedroom
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.motion_master
    - binary_sensor.motion_master_dsc
    from: 'off'
    to: 'on'
    id: motion_on
  - platform: state
    entity_id: sensor.temp_master
    id: speed_adjust
  - platform: state
    entity_id:
    - binary_sensor.motion_master
    - binary_sensor.motion_master_dsc
    from: 'on'
    to: 'off'
    for: 00:15:00
    id: motion_off
  condition:
  - condition: template
    value_template: '{% set fan_off = is_state(''fan.master'', ''off'') %} {% set
      via_remote = states.fan.master.context.parent_id == none %} {% set sleeping
      = is_state(''binary_sensor.sleep_simon'', ''on'') or is_state(''binary_sensor.sleep_zoey'',
      ''on'') %} {{ not (sleeping and fan_off and via_remote) }}'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      - condition: state
        entity_id: fan.master
        state: 'off'
      sequence:
      - if:
        - condition: numeric_state
          entity_id: sensor.temp_master
          above: 25
        then:
        - service: fan.turn_on
          target:
            entity_id: fan.master
          data:
            percentage: "{% if float(states.sensor.temp_master.state) > 26.5 %}\n
              \ 100\n{% else %}\n  65\n{% endif %}\n"
        - service: fan.oscillate
          data:
            oscillating: true
          target:
            entity_id: fan.master
        else:
        - service: fan.turn_off
          target:
            entity_id: fan.master
          data: {}
    - conditions:
      - condition: trigger
        id: speed_adjust
      - condition: template
        value_template: '{{ is_state(''fan.master'', ''on'') or (is_state(''binary_sensor.sleep_zoey'',
          ''on'') or is_state(''binary_sensor.sleep_simon'', ''on''))}}'
      sequence:
      - if:
        - condition: numeric_state
          entity_id: sensor.temp_master
          above: 25
        then:
        - service: fan.turn_on
          target:
            entity_id: fan.master
          data:
            percentage: "{% if float(states.sensor.temp_master.state) > 28 %}\n  100\n{%
              else %}\n  65\n{% endif %}\n"
        - service: fan.oscillate
          data:
            oscillating: true
          target:
            entity_id: fan.master
        else:
        - service: fan.turn_off
          target:
            entity_id: fan.master
          data: {}
    - conditions:
      - condition: trigger
        id: motion_off
      - condition: state
        entity_id: binary_sensor.sleep_master
        state: 'off'
      sequence:
      - service: fan.turn_off
        target:
          entity_id: fan.master
        data: {}
  mode: single
- id: '1678611097830'
  alias: Modes - Night Mode
  description: ''
  trigger:
  - platform: state
    entity_id: binary_sensor.motion_sensors
    from: 'on'
    to: 'off'
    for: 00:03:00
    id: no_motion
  - platform: state
    entity_id:
    - binary_sensor.motion_frontroom
    - binary_sensor.motion_livingroom
    from: 'off'
    to: 'on'
    id: motion
  - platform: state
    entity_id: input_boolean.night_mode
    from: 'off'
    to: 'on'
    id: night_mode_enabled
  - platform: state
    entity_id: input_boolean.night_mode
    from: 'on'
    to: 'off'
    id: night_mode_disabled
  condition:
  - condition: state
    entity_id: input_boolean.vacancy_mode
    state: 'off'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: no_motion
      - condition: time
        after: '20:30:00'
        before: 06:00:00
      - condition: template
        value_template: '{{ state_attr(''sensor.last_motion'', ''room_type'') == ''Bedroom''
          }}'
      - condition: state
        entity_id:
        - binary_sensor.occupancy_frontroom
        - binary_sensor.occupancy_livingroom
        - binary_sensor.occupancy_study
        state: 'off'
      - condition: state
        entity_id: input_boolean.night_mode
        state: 'off'
      sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.night_mode
        data: {}
    - conditions:
      - condition: trigger
        id: motion
      - condition: state
        entity_id: input_boolean.night_mode
        state: 'on'
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.night_mode
        data: {}
    - conditions:
      - condition: trigger
        id: night_mode_enabled
      sequence:
      - service: script.turn_on
        target:
          entity_id: script.turn_off_lights_common_areas
        data: {}
      - service: script.energy_saver
        data:
          command: enable
          mode: overnight
    - conditions:
      - condition: trigger
        id: night_mode_disabled
      sequence:
      - service: script.energy_saver
        data:
          command: disable
          mode: overnight
  mode: queued
- id: '1679094688218'
  alias: Modes - Vacancy Mode
  trigger:
  - platform: state
    entity_id:
    - sensor.house_status
    to: Vacant
    for: 00:03:00
    id: house_vacant
  - platform: state
    entity_id: sensor.house_status
    to: Occupied
    id: house_occupied
  - platform: state
    entity_id: input_boolean.vacancy_mode
    from: 'off'
    to: 'on'
    id: mode_enabled
  - platform: state
    entity_id: input_boolean.vacancy_mode
    from: 'on'
    to: 'off'
    id: mode_disabled
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: house_vacant
      sequence:
      - alias: Wait until no motion detected
        wait_template: '{{ states.binary_sensor | selectattr(''attributes.device_class'',
          ''defined'') | selectattr(''attributes.device_class'', ''eq'', ''motion'')
          | map(attribute=''state'') | select(''eq'', ''on'') | list | count == 0
          }}'
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.vacancy_mode
        data: {}
    - conditions:
      - condition: trigger
        id: house_occupied
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.vacancy_mode
        data: {}
    - conditions:
      - condition: trigger
        id: mode_enabled
      sequence:
      - service: script.energy_saver
        data:
          command: enable
          mode: vacant
      - service: light.turn_off
        entity_id: all
      - service: climate.turn_off
        entity_id: all
      - service: fan.turn_off
        entity_id: all
      - service: media_player.turn_off
        entity_id: all
    - conditions:
      - condition: trigger
        id: mode_disabled
      sequence:
      - service: script.energy_saver
        data:
          command: disable
          mode: vacant
  mode: queued
- id: '1679390348928'
  alias: iOS - Night Mode
  description: ''
  trigger:
  - platform: event
    event_type: ios.action_fired
    event_data:
      actionName: night_mode
    context:
      user_id:
      - 8cf5ca26368a47578d759264b2ceaf98
      - 9a78e16d6589444cbdf82944e76f59fd
  condition: []
  action:
  - service: input_boolean.toggle
    data: {}
    target:
      entity_id: input_boolean.night_mode
  mode: single
- id: '1679390383812'
  alias: iOS - Vacancy Mode
  description: ''
  trigger:
  - platform: event
    event_type: ios.action_fired
    event_data:
      actionName: vacancy_mode
    context:
      user_id:
      - 8cf5ca26368a47578d759264b2ceaf98
      - 9a78e16d6589444cbdf82944e76f59fd
  condition: []
  action:
  - service: input_boolean.toggle
    data: {}
    target:
      entity_id: input_boolean.vacancy_mode
  mode: single
- id: '1680568830618'
  alias: iOS - Holiday Mode
  description: ''
  trigger:
  - platform: event
    event_type: ios.action_fired
    event_data:
      actionName: holiday_mode
    context:
      user_id:
      - 8cf5ca26368a47578d759264b2ceaf98
      - 9a78e16d6589444cbdf82944e76f59fd
  condition: []
  action:
  - service: input_boolean.toggle
    data: {}
    target:
      entity_id: input_boolean.holiday_mode
  mode: single
- id: '1680833229703'
  alias: Sync Volume - Music
  description: ''
  trigger:
  - platform: state
    entity_id: media_player.display_kitchen
    attribute: volume_level
  - platform: state
    entity_id: media_player.audio
    to: playing
  - platform: state
    entity_id: media_player.all_chromecasts
    to: playing
  condition:
  - condition: state
    entity_id: media_player.display_kitchen
    state: playing
  action:
  - if:
      condition: state
      entity_id: media_player.audio
      state: playing
    then:
    - service: media_player.volume_set
      data:
        volume_level: '{{ state_attr(''media_player.display_kitchen'',''volume_level'')
          }}'
      target:
        entity_id: media_player.living_room
  - if:
    - condition: state
      entity_id: media_player.all_chromecasts
      state: playing
    then:
    - service: media_player.volume_set
      data:
        volume_level: '{{ state_attr(''media_player.display_kitchen'',''volume_level'')
          }}'
      target:
        entity_id: media_player.living_room
    - service: media_player.volume_set
      data:
        volume_level: '{{ ([0, float(state_attr(''media_player.display_kitchen'',''volume_level''))
          + 0.05, 1]|sort)[1] }}'
      target:
        entity_id: media_player.speaker_frontroom
    - service: media_player.volume_set
      data:
        volume_level: '{{ ([0, float(state_attr(''media_player.display_kitchen'',''volume_level''))
          + 0.15, 1]|sort)[1] }}'
      target:
        entity_id: media_player.speaker_bedroom
  mode: single
- id: '1681297500579'
  alias: Garage Door - Auto Open Zoey
  description: Automatically open the garage door on arrival
  trigger:
  - platform: zone
    entity_id: person.zoey
    zone: zone.home
    event: enter
    id: arriving
  - platform: zone
    entity_id: person.zoey
    zone: zone.home
    event: leave
    id: leaving
  condition:
  - condition: state
    entity_id: binary_sensor.zoey_focus
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: arriving
      - condition: state
        entity_id: cover.garage_door
        state: closed
      sequence:
      - service: cover.open_cover
        target:
          entity_id: cover.garage_door
        data: {}
    - conditions:
      - condition: trigger
        id: leaving
      - condition: state
        entity_id: sensor.house_status
        state: Vacant
      - condition: state
        entity_id: cover.garage_door
        state: open
      sequence:
      - service: cover.close_cover
        target:
          entity_id: cover.garage_door
        data: {}
  mode: single
- id: '1681447159003'
  alias: Appliance Control - Night or Vacancy Mode
  description: Turn Off Appliances once cycle completed and house vacant
  trigger:
  - platform: state
    entity_id:
    - sensor.dishwasher
    - sensor.washing_machine
    to: Finished
    for: 00:50:00
  condition:
  - condition: template
    value_template: '{{ is_state(''input_boolean.vacancy_mode'', ''on'') or is_state(''input_boolean.night_mode'',
      ''on'') }}'
  action:
  - service: switch.turn_off
    target:
      entity_id: "{% if trigger.entity_id == \"sensor.dishwasher\" %}\n  switch.plug_dishwasher\n{%
        elif trigger.entity_id == \"sensor.washing_machine\" %}\n  switch.plug_washingmachine\n{%
        endif %}\n"
  mode: single
- id: '1681700556753'
  alias: Track Dishes and Laundry
  description: Tracks number of loads of laundry and dishes each month
  trigger:
  - platform: state
    entity_id: sensor.dishwasher
    from: Finished
    to: Idle
    id: increment_dishes
  - platform: state
    entity_id: sensor.washing_machine
    from: Finished
    to: Idle
    id: increment_laundry
  - platform: time
    at: 00:00:03
    id: reset_counter
  - platform: numeric_state
    entity_id: sensor.power_dishwasher
    below: 1.5
    for: 00:00:30
    id: low_power
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: low_power
      sequence:
      - service: counter.increment
        target:
          entity_id: counter.dishwasher_power_low
        data: {}
    - conditions:
      - condition: trigger
        id: increment_dishes
      sequence:
      - service: counter.increment
        target:
          entity_id: counter.loads_dishes
        data: {}
      - service: counter.reset
        target:
          entity_id: counter.dishwasher_power_low
        data: {}
    - conditions:
      - condition: trigger
        id: increment_laundry
      sequence:
      - service: counter.increment
        target:
          entity_id: counter.loads_laundry
        data: {}
    - conditions:
      - condition: trigger
        id: reset_counter
      - condition: template
        value_template: '{{ now().day == 1 }}'
      sequence:
      - service: counter.reset
        target:
          entity_id:
          - counter.loads_dishes
          - counter.loads_laundry
        data: {}
  mode: single
- id: '1681809985937'
  alias: Notify - Dishwasher and Washing Machine
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.washing_machine
    - sensor.dishwasher
    from: Running
    to: Finished
    id: Completed
  - platform: state
    entity_id:
    - sensor.washing_machine
    - sensor.dishwasher
    from: Finished
    to: Idle
    id: Emptied
  condition:
  - condition: state
    entity_id: sensor.house_status
    state: Occupied
  - condition: state
    entity_id: input_boolean.mobile_notifications
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: Completed
      sequence:
      - service: notify.mobile_app_simon
        data:
          title: '{{ state_attr(trigger.entity_id, ''friendly_name'') }}'
          message: Cycle Completed
          data:
            tag: notify.{{ trigger.entity_id }}
    - conditions:
      - condition: trigger
        id: Emptied
      sequence:
      - service: notify.mobile_app_simon
        data:
          message: clear_notification
          data:
            tag: notify.{{ trigger.entity_id }}
  mode: single
- id: '1682030384432'
  alias: Auto Turn Off 3d Printer
  description: Turns off 3D Printer once a print is complete and the bed and hotend
    temperatures are less than 40 degrees
  trigger:
  - platform: template
    value_template: '{{ (not is_state(''sensor.voron_state'', ''Printing'')) and float(states(''sensor.voron_bed_actual''))
      < 40 and float(states(''sensor.voron_hotend_actual'')) < 40 }}'
    id: print_complete
    for: 00:03:00
  action:
  - service: switch.turn_off
    target:
      entity_id: switch.plug_voron
    data: {}
  mode: single
- id: '1692977188358'
  alias: New Automation
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.motion_theo
    - binary_sensor.motion_theo_dsc
    to: 'on'
  condition: []
  action:
  - service: notify.mobile_app_simon
    data:
      message: Movement
  mode: single
